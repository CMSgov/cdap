#!/usr/bin/env bash
# sopsw - sops wrapper script
# - intended for manual editing of values files in an DASG app-specific, root tf module
# - uses aws (awscli), sops (getsops.io), sponge, envsubst, and sed

set -Eeou pipefail

if [[ "$#" -ne 1 ]]; then
  echo "No argument provided. 'dev', 'test', 'sandbox', 'prod' is required, e.g '$0 dev'"
  exit 1
fi

PARENT_ENV="$1"
readonly PARENT_ENV

if [[ $PARENT_ENV != "dev" && $PARENT_ENV != "test" && $PARENT_ENV != "sandbox" && $PARENT_ENV != "prod" ]]; then
  echo "First argument (\$1) in '$0 \$1' must be one of dev, test, sandbox, or prod e.g. '$0 dev'"
  exit 1
fi

# SOPS_FILE and APP_NAME are derived from tftpl in sops module
SOPS_FILE="${SOPS_VALUES_DIR}/$${PARENT_ENV}.sops.yaml"
APP_NAME="${DASG_APP_NAME}"
readonly SOPS_FILE APP_NAME

if ! command -v sops >/dev/null 2>&1; then
  echo "'sops' not found. Try 'brew install sops' and run again" && exit 1
fi

if ! command -v sponge >/dev/null 2>&1; then
  echo "'sponge' not found. Try 'brew install moreutils' and run again" && exit 1
fi

AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query 'Account' --output text)"
readonly AWS_ACCOUNT_ID

KMS_KEY_ALIAS="alias/$${APP_NAME}-$${PARENT_ENV}"
readonly KMS_KEY_ALIAS

# Hopeful use in display to user for the specified editor; yields to sops configuration
LOCAL_EDITOR="$${SOPS_EDITOR:-$${EDITOR:-vim, nano, or vim}}"
readonly LOCAL_EDITOR

# Render the templated `.sops.kms[0].arn` in SOPS_FILE if it exists OR prompt use to create it.
if [ -f "$SOPS_FILE" ]; then
  echo "Attempting to resolve editor using \$SOPS_EDITOR, \$EDITOR, or defaulting to vim/nano/vi..."
  echo "Attempting to edit $${SOPS_FILE} with KMS Key $${KMS_KEY_ALIAS} using $${LOCAL_EDITOR}..."
  # Replace occurrences of ACCOUNT_ID using envsubst and save back to file
  # shellcheck disable=SC2016
  ACCOUNT_ID="$AWS_ACCOUNT_ID" envsubst '$ACCOUNT_ID' <"$SOPS_FILE" | sponge "$SOPS_FILE"
else
  echo "Attempting to resolve editor using \$SOPS_EDITOR, \$EDITOR, or defaulting to vim/nano/vi..."
  read -p "$${SOPS_FILE} not found. Do you want to create it using $${LOCAL_EDITOR} (y/N)? " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Attempting launch editor to create $${SOPS_FILE} with KMS Key $${KMS_KEY_ALIAS} using $${LOCAL_EDITOR}..."
    echo
    if SOPS_KMS_ARN="$(aws kms list-aliases --key-id "$(aws kms describe-key --key-id "alias/$${APP_NAME}-$${PARENT_ENV}" --query KeyMetadata.Arn --output text)" --query 'Aliases[0].AliasArn' --output text)"; then
      export SOPS_KMS_ARN
    else
      echo "KMS key at alias/$${APP_NAME}-$${PARENT_ENV} missing." && exit 1
    fi
  else
    echo "Selected: '$${REPLY}' Aborting..." && exit 1
  fi
fi

cleanup() {
  sed "s/\(arn:.*\)$${AWS_ACCOUNT_ID}/\1\$\{ACCOUNT_ID}/" <"$SOPS_FILE" | sponge "$SOPS_FILE"
  unset SOPS_KMS_ARN
  exit
}

# On exit, the AWS Account ID literal within the AWS KMS Key ARN is replaced with templated variable
trap cleanup ERR EXIT

# Finally, open file $SOPS_FILE with the specified $EDITOR or $SOPS_EDITOR
# OR exit on failure and yield to above `trap` to function
# NOTE: This works with tui/cli editors like, vi/vim/nano/emacs, but may misbehave when
#       EDITOR/SOPS_EDITOR specifies e.g. code/codium
sops --mac-only-encrypted --indent 2 --unencrypted-regex '/nonsensitive/' edit "$SOPS_FILE" || exit
